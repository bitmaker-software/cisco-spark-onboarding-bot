extends layout

block content
  div#root
    div.row
      h1.mt-4.mb-4.col-8 Editing Flow !{title}
      div.btn-group.mb-4.mt-4.col-4.btn-header(role="group")
        a.btn.btn-outline-dark.active(href='/manager/flow/' + flowId + '/edit', role="button", data-toggle="tooltip")
          svg.icon
            use(xlink:href=static.root + "/sprite.svg#settings")
          | Edit
        a.btn.btn-outline-dark(href='/manager/flow/' + flowId + '/send', role="button", data-toggle="tooltip")
          svg.icon.send
            use(xlink:href=static.root + "/sprite.svg#send")
          | Send
        a.btn.btn-outline-dark(href='/manager/flow/' + flowId + '/answers', role="button", data-toggle="tooltip")
          svg.icon
            use(xlink:href=static.root + "/sprite.svg#answer")
          | Answers
        a.btn.btn-outline-dark(href='/manager/flow/' + flowId + '/dashboard',role="button",data-toggle="tooltip")
          svg.icon
            use(xlink:href=static.root + "/sprite.svg#dashboard")
          | Dashboard
    div.row
      div.col-md-3
        div.input-group
          label Select the bot for this flow
          select.custom-select(v-model="selectedBot")
            option(v-for='bot in bots', :value="bot.id") {{ bot.name }}

    div.row
      div.col-md-3.step-container
        div.title-input
          input.form-control(type="text", v-model="title").text-center
        p.lead.text-center Available step types do be added to the flow

        draggable.sticky-top-left(v-model="stepTypes",:options="{group:{name:'elem',pull:'clone',put:false}, sort:false}")
          div.step-type(v-for="stepType in stepTypes")
            div.btn.btn-secondary
              svg.step-icon
                use(v-bind="{'xlink:href':'" + static.root + "/sprite.svg#' + stepTypeIcons[stepType.id]}")
                span {{ stepType.name }}
                span(data-toggle="tooltip", data-placement="top", title, v-bind:title="stepType.description")
                  i.material-icons info

      div.col-md-9.flow-container
        h2.title.text-primary Steps
        div(v-if="steps.length === 1")
          img.illustration(src=static.root + "/images/add.svg")
          h4.text-center You have no steps yet. Start by adding one!

        // Using Vue here
        div#steps.list-group
          //p {{ step }}
          draggable(v-model="steps")
            div.list-group-item.no-gutters(v-for="(step,index1) in steps")
              div.drag
                span.drag-handle.drag-handle-step
                  svg.icon
                    use(xlink:href=static.root + "/sprite.svg#drag")
              div.col
                // Default "text" input for all types of steps
                div.input-group
                  div.input-group-addon
                    svg.icon
                      use(v-bind="{'xlink:href':'" + static.root + "/sprite.svg#'+stepTypeIcons[step.step_type_id]}")
                  input.form-control.question(type="text", placeholder="Add your question/phrase", v-model="step.text")
                //- small {{ step.type_description }}

                //
                // Custom stuff depending on the step type
                //

                template(v-if="step.step_type_id === 1")
                  //
                  // Announcement, nothing to add
                  //

                template(v-if="step.step_type_id === 2")
                  //
                  // Question, nothing to add
                  //

                template(v-if="step.step_type_id === 3")
                  //
                  // Multiple Choice, add the choices
                  //
                  div.form-group.multiple-choice
                    draggable(v-model="step.step_choices")
                      div.input-group(v-for="(item, index2) in step.step_choices")
                        span.drag-handle.drag-handle-multiple-choice.input-group-addon
                          svg.icon
                            use(xlink:href=static.root + "/sprite.svg#drag")
                        //label
                        input.form-control.answer(type="text" v-model="item.text")
                        span.input-group-addon(@click="deleteStepChoice(step,index2)")
                          i.material-icons delete
                      // TODO: add empty choices if the list is empty?
                    button.btn.btn-outline-primary(type="button", @click="step.step_choices.push({})") Add answer

                template(v-if="step.step_type_id === 4")
                  //
                  // User Upload Document
                  //
                  div.input-group.file-type
                    label Answer Destination Folder
                      input(type='button', value='Google Drive', @click='getFolderId(step)')
                      input(type='button', value='Box')
                      input(type='button', value='SFTP')
                  p.text-muted {{step.upload_dir_name}}

                template(v-if="step.step_type_id === 5")
                  //
                  // User Read Document, add the file picker
                  //
                  div.input-group.file-type
                    label Document to read
                      input(type='button', value='Google Drive', @click='getFileId(step)')
                      input(type='button', value='Box')
                      input(type='button', value='SFTP')
                  p.text-muted {{step.document_name}}

                template(v-if="step.step_type_id === 6")
                  //
                  // User Read and Upload Document
                  //
                  div.input-group.file-type
                    label Document to read
                      input(type='button', value='Google Drive', @click='getFileId(step)')
                      input(type='button', value='Box')
                      input(type='button', value='SFTP')
                  p.text-muted {{step.document_name}}
                  hr
                  div.input-group.file-type
                    label Answer destination folder
                      input(type='button', value='Google Drive', @click='getFolderId(step)')
                      input(type='button', value='Box')
                      input(type='button', value='SFTP')
                  p.text-muted {{step.upload_dir_name}}

                template(v-if="step.step_type_id === 7")
                  //
                  // People to meet
                  //
                  h6(style='margin-top: 20px;') You can select, on "Send flow", whom the respondent will meet.

              span.input-group-addon.delete-answer(@click="deleteStep(step.id,index1)")
                i.material-icons delete
        // Trigger the modal with a button
        draggable(v-model="stepTypes2", :options="{group:'elem'}", @add="addStepByDrop").drag-area Drag & drop questions here or click the button below
        hr
        div.row
          div.col
            button.btn.btn-outline-primary.btn-lg.mr-4(type="button", data-toggle="modal", data-target="#myModal") Add step
          div.col.text-right
            button.btn.btn-primary.btn-lg(type="button", @click="saveSteps") {{ saveStepsButtonText }}

    // Modal
    div#myModal.modal.fade(role="dialog")
      div.modal-dialog
        // Modal content
        div.modal-content
          div.modal-header
            h4.modal-title New step
            button.close(type="button" data-dismiss="modal") &times;
          div.modal-body
            div.form-group
              label(for="new-step-selector") Type
              select#new-step-selector.form-control(v-model="newStepTypeSelected")
                each stepType in stepTypes
                  option(value=stepType.id)= stepType.name
          div.modal-footer
            button.btn.btn-primary(type="button", @click="addStep(newStepTypeSelected)") Add step
            button.btn.btn-secondary(type="button" data-dismiss="modal") Close

  //- p Debug steps
  //- div(v-for="step in steps", style="padding-top: 20px;") {{ step }}

block pageScripts
  script.
    var stepTypesFromServer = !{JSON.stringify(stepTypes).replace(/<\//g, '<\\/')};
    var botsFromServer = !{JSON.stringify(bots)};
    var selectedBotFromServer = "!{selectedBot}";
    var stepTypesObj = {};
    stepTypesFromServer.forEach(function (element) {
      stepTypesObj[element.id] = element;
      console.log(element)
    });
    var flowId = !{flowId}; // used on AJAX requests
    var titleReceived = "!{title}"; // used on AJAX requests
    console.log(titleReceived);
    console.log('stepTypesFromServer');
    console.log(stepTypesFromServer);
    console.log('stepTypesObj:');
    console.log(stepTypesObj);
    var flowId = "!{flowId}"; // used on AJAX requests

  script(src=static.root + '/js/manager_flow_steps.js')

  //script(id='gdrive', src=static.root + '/js/gdrive.js@' + static.suffix,
  script(id='gdrive', src=static.root + '/js/gdrive.js',
  data-gdrive-client-id=gdrive_client_id,
  data-gdrive-developer-key=gdrive_developer_key,
  data-gdrive-share-to=gdrive_share_to)

  script(async, defer, src="https://apis.google.com/js/api.js", onload="GDrive.onApiLoaded()")
  //onreadystatechange="if (this.readyState === 'complete') this.onload()")